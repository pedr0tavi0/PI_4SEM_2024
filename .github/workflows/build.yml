name: Jobs CI  # Nome do workflow de CI

on:
  push:
    branches:
      - main  # O workflow será acionado quando houver um push na branch "main"

jobs:
  build:
    runs-on: ubuntu-latest  # O job será executado em um contêiner com a última versão do Ubuntu
    services:
      mysql:
        image: mysql:5.7  # Usar a imagem do MySQL versão 5.7
        env:
          MYSQL_ROOT_PASSWORD: root  # Definir a senha root do MySQL
          MYSQL_DATABASE: testdb  # Criar um banco de dados chamado "testdb"
        ports:
          - 3306:3306  # Mapear a porta 3306 do contêiner para a porta 3306 do host
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3
        # Configurar verificações de integridade do MySQL

    steps:
    - name: Checkout repository  # Passo para fazer o checkout do repositório
      uses: actions/checkout@v2  # Usar a ação oficial do GitHub para checkout

    - name: Set up Python  # Passo para configurar o Python
      uses: actions/setup-python@v2  # Usar a ação oficial do GitHub para configurar o Python
      with:
        python-version: '3.x'  # Versão do Python a ser usada

    - name: Install dependencies  # Passo para instalar dependências
      working-directory: CODIFICAÇÃO  # Definir o diretório de trabalho
      run: |
        python -m pip install --upgrade pip  # Atualizar o pip
        pip install -r requirements.txt  # Instalar as dependências listadas no arquivo requirements.txt

    - name: Wait for MySQL to be ready  # Passo para esperar o MySQL estar pronto
      run: |
        until docker inspect --format '{{.State.Health.Status}}' ${{ job.services.mysql.id }} | grep -q "healthy"; do
          echo 'waiting for mysql to be connectable...'  # Mensagem de espera
          sleep 5  # Esperar 5 segundos antes de verificar novamente
        done

    - name: Start Flask application  # Passo para iniciar a aplicação Flask
      working-directory: CODIFICAÇÃO  # Definir o diretório de trabalho
      env:
        CHATGPT_API_KEY: ${{ secrets.CHATGPT_API_KEY }}  # Usar a chave de API do ChatGPT armazenada nos segredos do repositório
        DATABASE_URL: mysql+pymysql://root:root@127.0.0.1:3306/testdb  # Definir a URL de conexão com o banco de dados
      run: |
        nohup python run.py &  # Iniciar a aplicação Flask em segundo plano

    - name: Wait for Flask to be ready  # Passo para esperar a aplicação Flask estar pronta
      run: |
        echo "Waiting for Flask to start..."  # Mensagem de espera
        sleep 10  # Esperar 10 segundos para garantir que a aplicação Flask esteja pronta

    - name: Run tests and measure coverage
      run: |
        coverage run -m pytest
        coverage report
    # Descomente as linhas acima para executar testes e medir a cobertura de código

    - name: Test Flask application  # Passo para testar a aplicação Flask
      run: |
        curl --fail http://127.0.0.1:5000 || (echo "Flask application did not start correctly" && exit 1)
        # Usar o curl para verificar se a aplicação Flask está respondendo corretamente

    - name: Run Flask for a specific time  # Passo para executar a aplicação Flask por um tempo específico
      run: |
        echo "Running Flask application for 10 seconds..."
        sleep 10  # Esperar 10 segundos enquanto a aplicação Flask está rodando

    - name: Stop Flask application  # Passo para parar a aplicação Flask
      run: |
        echo "Stopping Flask application..."
        pkill -f run.py  # Usar pkill para parar a aplicação Flask

    - name: Additional steps  # Passo para executar etapas adicionais
      run: echo "Continue with the next steps..."  # Mensagem indicando a continuação para os próximos passos
